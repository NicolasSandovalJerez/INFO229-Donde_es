"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkConfig = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const defaults_1 = require("../constants/defaults");
const utils_1 = require("./utils");
const defaultSettingsPrompt = {
    type: "list",
    name: "useDefaultSettings",
    message: "Use default settings?",
    choices: ["Yes", "No"],
};
const editSettingsPrompt = {
    type: "list",
    name: "editSettings",
    message: "Edit settings now?",
    choices: ["Yes", "No"],
};
const overwritePrompt = {
    type: "list",
    name: "overwriteFile",
    message: ".treerc already exists, overwrite it?",
    choices: ["Yes", "No"],
};
const configExists = () => {
    const configPath = (0, utils_1.getConfigPath)();
    return configPath ? (0, utils_1.validatePath)(configPath, "file") : false;
};
const createConfig = (settings) => __awaiter(void 0, void 0, void 0, function* () {
    const configPath = (0, utils_1.getConfigPath)();
    if (!configPath)
        return Promise.reject("Could not created config");
    try {
        console.info("Writing config file to:", configPath);
        const exists = fs_1.default.existsSync(configPath);
        if (exists) {
            const { overwriteFile } = yield inquirer_1.default.prompt([overwritePrompt]);
            if (overwriteFile === "No") {
                return Promise.resolve("done");
            }
        }
        // If file does not exist OR user select to overwrite it, create the file
        fs_1.default.writeFileSync(configPath, JSON.stringify(settings, null, 2));
        return Promise.resolve(configPath);
    }
    catch (err) {
        const errMsg = "Error creating config file:" + configPath;
        console.error(errMsg);
        console.error(err);
        return Promise.reject(errMsg);
    }
});
const getEditor = () => {
    // As first option see if vscode binary is available
    try {
        (0, child_process_1.execSync)("code --help");
        return "code";
    }
    catch (_a) {
        const { VISUAL, EDITOR } = process.env;
        if (VISUAL || EDITOR)
            return VISUAL || EDITOR;
        if (process.platform === "win32")
            return "C:\\Windows\\System32\\notepad.exe";
        else
            return "vim";
    }
};
const checkConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    if (configExists())
        return;
    try {
        console.log("Building a tree from certain directories may have slow performance.");
        console.log(`By default, ignore these directories:\n${defaults_1.defaults.ignored.join("\n")}\n`);
        const { useDefaultSettings } = yield inquirer_1.default.prompt([defaultSettingsPrompt]);
        if (useDefaultSettings === "Yes")
            return createConfig(defaults_1.defaults);
        const { editSettings } = yield inquirer_1.default.prompt([editSettingsPrompt]);
        if (editSettings === "Yes") {
            const configPath = yield createConfig(defaults_1.defaults);
            const editor = getEditor();
            (0, child_process_1.execSync)(`${editor} ${configPath}`);
        }
        else {
            // If not using defaults or editing now, do not create a .treerc file
            return;
        }
    }
    catch (error) {
        if (error.isTtyError) {
            // Prompt couldn't be rendered in the current environment
            return console.error(error);
        }
        else {
            // Something else went wrong
            return console.error(error);
        }
    }
});
exports.checkConfig = checkConfig;
//# sourceMappingURL=checkConfig.js.map