"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const cli_1 = require("./cli");
const tmpBase = process.platform === "win32" ? process.env.TEMP : "/tmp";
const tmpDir = `tree_${Date.now()}`;
const tmpPath = tmpBase + "/" + tmpDir;
const buildTree = "src/__tests__/trees/buildTest.tree";
test("Should be able to build structure from given tree file", () => {
    (0, cli_1.cli)(["build", buildTree, tmpPath]);
    const treeResult = (0, cli_1.cli)([tmpPath]);
    const testTree = fs_1.default.readFileSync(buildTree).toString();
    expect(treeResult.trim()).toEqual(testTree);
});
test("Should correctly create files and directories", () => {
    const license = fs_1.default.lstatSync(tmpPath + "/LICENSE");
    expect(license.isFile()).toBe(true);
    const gitignore = fs_1.default.lstatSync(tmpPath + "/.gitignore");
    expect(gitignore.isFile()).toBe(true);
    const src = fs_1.default.lstatSync(tmpPath + "/src");
    expect(src.isFile()).toBe(false);
    const emptyDir = fs_1.default.lstatSync(tmpPath + "/src/utils/emptyDir");
    expect(emptyDir.isFile()).toBe(false);
});
//# sourceMappingURL=buildStructure.test.js.map