"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStructure = void 0;
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@structure-codes/utils");
// @ts-ignore
const is_nondot_1 = __importDefault(require("@structure-codes/is-nondot"));
const utils_2 = require("./utils/utils");
const getPaths = (tree) => {
    const paths = [];
    const searchTree = (tree, filepath) => {
        tree.forEach((branch) => {
            const newPath = [...filepath];
            newPath.push(branch.name);
            if (branch.children && branch.children.length > 0)
                return searchTree(branch.children, newPath);
            const type = branch.name.includes(".") || (0, is_nondot_1.default)(branch.name) ? "file" : "dir";
            return paths.push({ filepath: newPath.join("/"), type });
        });
    };
    searchTree(tree, []);
    return paths;
};
const buildStructure = (file, outputLocation) => {
    if (!(0, utils_2.validatePath)(file, "file")) {
        console.log("Path is INVALID");
        return;
    }
    try {
        const data = fs.readFileSync(file);
        const tree = (0, utils_1.treeStringToJson)(data.toString());
        console.log("tree is: " + JSON.stringify(tree));
        const paths = getPaths(tree);
        if (!(0, utils_2.pathExists)(outputLocation)) {
            console.log("Creating target directory:", outputLocation);
            fs.mkdirSync(outputLocation, { recursive: true });
        }
        paths.forEach(({ filepath, type }) => {
            const fullPath = outputLocation + "/" + filepath.replace(/\/+/g, "/");
            if ((0, utils_2.pathExists)(fullPath)) {
                console.warn("Path already exists:", fullPath);
                return;
            }
            if (type === "dir") {
                fs.mkdirSync(fullPath, { recursive: true });
            }
            else {
                const dirname = path_1.default.dirname(fullPath);
                const exist = (0, utils_2.pathExists)(dirname);
                if (!exist) {
                    fs.mkdirSync(dirname, { recursive: true });
                }
                fs.writeFileSync(fullPath, "", { flag: "wx" });
            }
        });
    }
    catch (e) {
        console.error(e.message);
    }
};
exports.buildStructure = buildStructure;
//# sourceMappingURL=buildStructure.js.map