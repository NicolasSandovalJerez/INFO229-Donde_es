"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTree = void 0;
const fs = __importStar(require("fs"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const utils_1 = require("@structure-codes/utils");
const utils_2 = require("./utils/utils");
const getDefaults = () => {
    const configPath = (0, utils_2.getConfigPath)();
    if (!configPath)
        return [];
    try {
        const config = fs.readFileSync(configPath).toString();
        return JSON.parse(config);
    }
    catch (err) {
        console.warn("Could not find config file at:" + configPath);
        return [];
    }
};
const globOptions = ({ parentDir, ignored, configIgnore }) => {
    const config = getDefaults();
    const defaultIgnore = configIgnore ? [] : config.ignored;
    const mergedIgnore = [...ignored, ...defaultIgnore].map((path) => `${parentDir}/**/${path}/**`);
    return {
        dot: true,
        ignore: mergedIgnore,
        strict: false,
    };
};
const generateTree = (directory, options) => {
    if (!(0, utils_2.validatePath)(directory, "dir"))
        return;
    const { silent, json, output, editor, ignore: ignored, configIgnore, dirOnly } = options;
    const absolutePath = path_1.default.resolve(directory).replace(/\\/g, "/");
    const searchPath = `${absolutePath}/**/*${dirOnly ? "/" : ""}`;
    (0, glob_1.default)(searchPath, globOptions({ parentDir: absolutePath, ignored, configIgnore }), (err, matches) => {
        if (err) {
            return console.error(`Error searching for files in ${absolutePath}`);
        }
        if (!matches) {
            return console.error("No matches found");
        }
        const tree = [];
        let _index = 0;
        matches.forEach((match) => {
            const path = match.replace(absolutePath, "");
            const levels = path.split("/");
            let curr = tree;
            levels.forEach((level) => {
                // Avoid empty strings
                if (!level)
                    return;
                // Generate tree json structure
                const branch = curr.find((leaf) => leaf.name === level);
                if (branch)
                    return (curr = branch.children);
                curr.push({
                    name: level,
                    children: [],
                    _index,
                });
                _index++;
                curr = curr[0].children;
            });
        });
        const treeString = (0, utils_1.treeJsonToString)({ tree });
        if (output) {
            if (!silent)
                console.info(`Writing data to ${output}`);
            fs.writeFileSync(output, treeString);
        }
        if (!silent && json) {
            console.info(JSON.stringify(tree, null, 2));
        }
        else if (!silent) {
            console.info(treeString);
        }
        // Open generated tree in vscode if the user has it installed
        if (editor) {
            try {
                (0, child_process_1.execSync)("code --help");
            }
            catch (_a) {
                return console.warn("Could not find code binary on path.");
            }
            const tmpDir = process.platform === "win32" ? process.env.TEMP : "/tmp";
            const tmpFile = `${path_1.default.basename(absolutePath)}_${Date.now()}.tree`;
            const tmpPath = tmpDir + "/" + tmpFile;
            fs.writeFileSync(tmpPath, treeString);
            (0, child_process_1.execSync)(`code ${tmpPath}`);
        }
    });
};
exports.generateTree = generateTree;
//# sourceMappingURL=generateTree.js.map